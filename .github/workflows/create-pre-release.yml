name: prerelease

on:
  workflow_call: { }
  workflow_dispatch: { }

jobs:
  linux:
    uses: ./.github/workflows/build-Linux-x64-AppImage.yml
    secrets: inherit
    with:
      prerelease: true

  macos-arm64:
    uses: ./.github/workflows/build-MacOS-arm64-DMG.yml
    secrets: inherit
    with:
      prerelease: true

  macos-x64:
    uses: ./.github/workflows/build-MacOS-x64-DMG.yml
    secrets: inherit
    with:
      prerelease: true

  windows-msi:
    uses: ./.github/workflows/build-Windows-x64-MSI.yml
    secrets: inherit
    with:
      prerelease: true

  windows-portable:
    uses: ./.github/workflows/build-Windows-x64-Portable-EXE.yml
    secrets: inherit
    with:
      prerelease: true


  release:
    needs: [linux, macos-arm64, macos-x64, windows-msi, windows-portable]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Private Repository
        uses: actions/checkout@v4
        with:
          # Checkout des Repos, in dem die electron-builder.yml liegt
          repository: BiP-org/next-exam
          ref: main
          token: ${{ secrets.PAT_BiP_ORG_NEXT_EXAM }}
          # Fetch-depth 0 ist wichtig, um alle Tags zu holen
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: rel
          merge-multiple: true

      # Neuer Schritt: Lese die Version aus der YAML-Datei
      - name: Read version from electron-builder.yml
        id: version_reader
        run: |
          # Installiere yq (ein Kommandozeilen-YAML-Prozessor)
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq && sudo chmod +x /usr/bin/yq

          # Lese die buildVersion aus der /student/electron-builder.yml
          VERSION=$(yq e '.buildVersion' student/electron-builder.yml)
          echo "Gelesene Version: $VERSION"

          # Erstelle den neuen Pre-Release-Tag
          NEW_TAG="pre$VERSION"
          echo "Neuer Tag: $NEW_TAG"

          # Finde den letzten echten Release-Tag f체r das Changelog
          LAST_RELEASE_TAG=$(git tag --sort=-v:refname | grep "^v[0-9]" | head -n 1)
          echo "Letzter Release-Tag f체r Changelog: $LAST_RELEASE_TAG"

          # Setze die Outputs f체r sp채tere Schritte
          echo "new_prerelease_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"
          echo "last_release_tag=$LAST_RELEASE_TAG" >> "$GITHUB_OUTPUT"

      - name: Tag Release
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version_reader.outputs.new_prerelease_tag }}
          git push origin ${{ steps.version_reader.outputs.new_prerelease_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_BiP_ORG_NEXT_EXAM }}

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          ignorePreReleases: false
          # Verwende den letzten echten Release-Tag als Startpunkt
          fromTag: ${{ steps.version_reader.outputs.last_release_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create pre-release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: true
          tag_name: ${{ steps.version_reader.outputs.new_prerelease_tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: |
            rel/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

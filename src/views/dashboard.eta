<% layout('./layout-part') %>
<%~ includeFile('./topbar-part', it) %>




<div id="wrapper" class="w-100 h-100 d-flex" >

    <%~ includeFile('./sidebar-part', it) %>

    <div id="content" class="fadeinslow p-3">
        <div class="btn btn-success m-1" style="width:100px;"  onclick="startExam('all')">Exam starten</div>
        <div class="btn btn-info m-1" style="width:100px;" onclick="toggleUpload()">Datei senden</div>
        <div class="btn btn-info m-1" style="width:100px;" onclick="getFiles('all')">Abgabe holen</div>
        <div class="btn btn-danger m-1" style="width:100px;" onclick="endExam('all')" >Exam beenden</div>
        <div id="studentslist" class="placeholder pt-4"> </div>
    </div>

    <div id="uploaddiv" class="fadeinslow">
        <form id="uploadform" method="POST" action="http://localhost:3000/server/data/send/all" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="formFileMultiple" class="form-label">Send Files to ALL Clients</label> 
                <div class="btn-close d-inline float-end" onclick="toggleUpload()"></div>
                <input class="form-control" type="file" name="file" id="formFileMultiple" multiple>
                <input class="form-control" type="hidden" name="csrfservertoken" id="csrfservertoken" value="<%= it.csrfservertoken%>">
                <input class="form-control" type="hidden" name="servername" id="servername" value="<%= it.servername%>">
            </div>
            <input type="submit" name="submit" class="btn btn-info"/>
            <span id="status"></span> 
        </form>
    </div>

</div>





<script>

    /**
    *     !!  TODO  replace localhost in all server centric calls with IP
    */
    const csrfservertoken = `<%= it.csrfservertoken%>`;
    const servername =  `<%= it.servername%>`;
    const serverip =  `<%= it.serverip%>`;
    let studentList = [];
   
    function startExam(who){
        status("starting exam mode");
        if (who == "all"){
            if ( studentList.length <= 0 ) { console.log("no clients connected") }
            else {  
                studentList.forEach( (student) => {
                    //check exam mode for students - dont initialize twice
                    if (student.exammode){ return; }
                    fetch(`http://${student.clientip}:3000/client/control/exammode/start/${student.token}`)
                    .then( response => response.json() )
                    .then( async (data) => {
                        status(data.message);
                        console.log(data);
                    })
                    .catch(error => {console.log(error)});
                });
            }
        }
    }



    function endExam(who){
        status("stopping exam mode");
        if (who == "all"){
            if ( studentList.length <= 0 ) { status("no clients connected"); console.log("no clients connected") }
            else {  
                studentList.forEach( (student) => {
                    fetch(`http://${student.clientip}:3000/client/control/exammode/stop/${student.token}`)
                    .then( response => response.json() )
                    .then( async (data) => {
                        status(data.message);
                        console.log(data);
                    })
                    .catch(error => {console.log(error)});
                });
            }
        }

    }


    $(document).ready(function() {  
        //make upload div visisble
        $('#uploadform').submit(function(e) {  
            e.preventDefault(); // avoid to actual submit the form data
            $("#status").empty().text("File is uploading...");

            
            $(this).ajaxSubmit({  
                error: function(xhr) {  
                    console.log('Error: ' + xhr.status);  
                },  
                success: function(response) {  
                    console.log(response)  
                    $("#status").empty().text(response.status); 
                    if (response.status === "done") {
                        status("Files sent");
                        console.log(response);
                        setTimeout(toggleUpload, 2000);  
                    } 
                }  
            });  
        }); 
    });  

    // get finished exams (ABGABE) from students
    async function getFiles(who){
        if (who == "all"){
            if ( studentList.length <= 0 ) { console.log("no clients connected") }
            else {  
                console.log("Requesting Filetransfer from ALL Clients")
                studentList.forEach( (student) => {
                    fetch(`http://${student.clientip}:3000/client/data/abgabe/send/${student.token}`)
                    .then( response => response.json() )
                    .then( async (data) => {
                        status(data.status);
                        console.log(data);
                    })
                    .catch(error => {console.log(error)});
                });
            }
        }
    }


    //stop and clear this exam server instance
    async function stopserver(){
        await fetch(`http://${serverip}:3000/server/control/stopserver/${servername}/${csrfservertoken}`)
        .then( response => response.json() )
        .then( async (data) => {
            status(data.message);
            console.log(data);
            await sleep(3000);
            window.location.href = `http://localhost:3000/server/ui/serverlist`;
        });
    }



    //validate a specific token
    async function task2(token, ip){
        await fetch(`http://${ip}:3000/client/control/tokencheck/${token}`)
        .then( response => response.json() )
        .then( async (data) => {
               console.log(data);
        });
    }


    //remove student from exam
    async function kick(studenttoken, studentip){
        //unregister locally
        await fetch(`http://localhost:3000/server/control/kick/${servername}/${csrfservertoken}/${studenttoken}`)
        .then( response => response.json() )
        .then( async (data) => {
            console.log(data);
            status(data.status);
        });
        //inform student
        await fetch(`http://${studentip}:3000/client/control/kick/${studenttoken}`)
        .then( response => response.json() )
        .then( async (data) => {
               console.log(data);
        });
    }




    //remove student from exam
    async function restore(studenttoken){

        await fetch(`http://${serverip}:3000/server/control/studentlist/statechange/${servername}/${studenttoken}/true`)
            .then( response => response.json() )
            .then( async (data) => {
                console.log(data);
            });


    }







    // Update Students List
    async function getStudentlist(){
        // TODO: do not refresh the whole widget list everytime.. just add new widgets and refresh the screenshots !
        await fetch(`http://localhost:3000/server/control/studentlist/${servername}/${csrfservertoken}`)
        .then( response => response.json() )
        .then( data => {
            if (data && data.status === "error"){ console.log(data.message); return; }
            studentList = data
            let html = "";
            let now = new Date().getTime();
            data.forEach( row => {
                if (now - 60000 > row.timestamp) { //student connection lost - DISABLE Widget !
                    html += `<div class="studentwidget btn  btn-block shadow-sm border rounded-3 m-1">
                                ${row.clientname}<button onclick='kick("${row.token}","${row.clientip}" )' type="button" class="btn btn-outline-danger btn-sm btn-close float-end"></button><br>
                                <img src='/files/${row.token}.jpg' onerror="this.src='/img/icons/nouserscreenshot.png'" class="deactivated rounded-3 border"><br>
                            </div>`;
                }
                else {
                    let focusclass = "focusok"
                    if (row.focus === false) {
                        focusclass = "focuswarn";
                        status(`${row.clientname} has left exammode`);
                    }
                    html += `<div class="${focusclass} studentwidget btn  btn-block shadow-sm border rounded-3 m-1">
                                ${row.clientname}<button  onclick='kick("${row.token}","${row.clientip}" )' type="button" class="btn btn-outline-danger btn-sm btn-close float-end"></button><br>
                                <img src='/files/${row.token}.jpg?ver=${row.timestamp}' onerror="this.src='/img/icons/nouserscreenshot.png'" class="rounded-3 border"><br>
                                <div class="btn-group p-2" role="group">
                                    <button  onclick='task2("${row.token}","${row.clientip}" )' type="button" class="btn btn-outline-success btn-sm">send</button>
                                    <button  onclick='task2("${row.token}","${row.clientip}" )' type="button" class="btn btn-outline-success btn-sm">get</button>
                                    <button  onclick='restore("${row.token}")' type="button" class="btn btn-outline-success btn-sm">restore</button>
                                   
                                </div>
                            </div>`;
                }
            });
            document.getElementById("studentslist").innerHTML = html;
        }).catch(error => {console.log(error)});
    }
    getStudentlist();
    setInterval(() => { getStudentlist() }, 2000)

    // implementing a sleep (wait) function
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // make upload div visible or hide it
    function toggleUpload(){
        let status =  $("#uploaddiv").css("display");
        if (status == "none") {  
            $("#uploaddiv").css("display","block");
            $("#formFileMultiple").val('') 
        }
        else {  $("#uploaddiv").css("display","none"); }
    }

    //show status message
    async function status(text){
        $("#statusdiv").text(text)
        $("#statusdiv").fadeIn("slow")
        await sleep(2000);
        $("#statusdiv").fadeOut("slow")
    }

    // manipulate css
    $(".nav").find(".active").removeClass("active");
    $("#overview").addClass("active");
    $("#statusdiv").fadeOut("slow")

</script>